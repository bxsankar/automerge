name: Automated Merge Workflow

on:
  push:
    branches:
      - source # Adjust to the branch you want to trigger the merge from
  workflow_run:
    workflows: ["Run Merge Workflow"] # This triggers the merge workflow

jobs:
  automerge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: "Temporarily disable 'include administrators' default branch protection"
        id: disable_include_admins
        uses: benjefferies/branch-protection-bot@master
        if: always()
        with:
            access_token: ${{ secrets.TOKEN }}
            branch: $target_branch
            enforce_admins: false
    
      - name: Auto Merge Branches $source_branch & $target_branch
        continue-on-error: true
        id: merge
        run: |
          # Set the source and target branches to merge
          source_branch=source
          target_branch=NewSource8
          git config --global user.email "bxsankar@sentara.com"
          git config --global user.name "balaji"

          # Check if the event was triggered by a push to the source branch
          if [[ $GITHUB_REF == "refs/heads/$source_branch" ]]; then
            # Fetch the latest changes from the target branch
            git fetch origin $target_branch:$target_branch

            # Merge the source branch into the target branch
            git checkout $target_branch
            echo "::set-output name=merge_successful::pr"           
            git merge --no-ff --no-commit --allow-unrelated-histories $source_branch
          

            # Commit the merge
            git commit -m "Automated merge of $source_branch into $target_branch"

            # Push the changes back to the repository
            git push origin $target_branch

            # Set an output variable to indicate the merge was successful
            echo "::set-output name=merge_successful::true"
          else
            # If the event was not triggered by a push to the source branch, set the output variable to false
            echo "::set-output name=merge_successful::false"
          fi
          
      - name: Merge Status
        run: |
          # Check the output variable to determine if the merge was successful
          if [[ "${{ steps.merge.outputs.merge_successful }}" == "true" ]]; then
            echo "Branches were successfully merged."
          else
            echo "No merge was performed as since there is a merge conflict."
          fi          
      - name: "Restore 'include administrators' default branch protection"
        uses: benjefferies/branch-protection-bot@master
        if: always() # Force to always run this step to ensure "include administrators" is always turned back on
        with:
            access_token: ${{ secrets.TOKEN }}
            branch: $target_branch
            enforce_admins: ${{ steps.disable_include_admins.outputs.initial_status }}    
            
      - name: PR Branch Checkout     
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Pull Request Created for Merge Conflict
        uses: devops-infra/action-pull-request@v0.5.5
        if: ${{ steps.merge.outputs.merge_successful }}" == "pr"
        with:
            github_token: ${{ secrets.TOKEN }}
            title: ${{ github.event.commits[0].message }}
            assignee: ${{ github.actor }}
            old_string: "**Write you description here**"
            new_string: ${{ github.event.commits[0].message }}
            get_diff: true     
            source_branch: source
            target_branch: NewSource8
            body: "**Automated pull request**"
            reviewer:  "mxsunda1, vxsuresh"
            ignore_users: "dependabot"
            draft: false
            allow_no_diff: false
